

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
      + 2
      + getCyclesForNextTransmissionStart(
        DELAY_CYCLES_BEFORE_1ST_TRANSMISSION + 2 + 3
      );
    
    noInterrupts();
  80:	f8 94       	cli
    /*
     * Set pins 6 (timer 0's OC0A), 4 (USART clock) and 1 (USART TX) as outputs;
     * everything else can be left as input.
     */
    DDRD = bit(DDD6) | bit(DDD4) | bit(DDD1);
  82:	82 e5       	ldi	r24, 0x52	; 82
  84:	8a b9       	out	0x0a, r24	; 10
>
class I2SDriver {
private:
  static void configureTimer0(const uint8_t cyclesForNextTransmission) {
    // Fast PWM (mode 7, continues below), don't start the timer yet
    TCCR0B = bit(WGM02);
  86:	88 e0       	ldi	r24, 0x08	; 8
  88:	85 bd       	out	0x25, r24	; 37
    // OC0A toggle mode operation, OC0B normal mode operation, fast PWM (mode 7)
    TCCR0A = bit(COM0A0) | bit(WGM01) | bit(WGM00);
  8a:	93 e4       	ldi	r25, 0x43	; 67
  8c:	94 bd       	out	0x24, r25	; 36
    OCR0A = SAMPLE_PERIOD - 1;
  8e:	9f e9       	ldi	r25, 0x9F	; 159
  90:	97 bd       	out	0x27, r25	; 39
    TCNT0 = FULL_BIT_PERIOD - cyclesForNextTransmission - 2;
  92:	9d ef       	ldi	r25, 0xFD	; 253
  94:	96 bd       	out	0x26, r25	; 38
  }

  static void configureUSART() {
    // Set UBRR0 to 0 before enabling MSPIM mode
    UBRR0 = 0;
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  9a:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    /*
     * - MSPIM mode;
     * - MSB sent first;
     * - sample first (on rising edge), setup then (on falling edge).
     */
    UCSR0C = bit(UMSEL01) | bit(UMSEL00);
  9e:	90 ec       	ldi	r25, 0xC0	; 192
  a0:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    // Only transmitter enabled.
    UCSR0B = bit(TXEN0);
  a4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    // UBRR0 finally configured; the internal counter starts counting down now.
    UBRR0 = HALF_BIT_PERIOD - 1;
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     */
    DDRD = bit(DDD6) | bit(DDD4) | bit(DDD1);
    configureTimer0(cyclesForNextTransmission);
    configureUSART();
    // Start timer 0 (without prescaler)
    bitSet(TCCR0B, CS00);
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	85 bd       	out	0x25, r24	; 37
inline void delayInCyclesWithNOP() {
  if (T) {
    delayInCyclesWithNOP<T / 2>();
    delayInCyclesWithNOP<T / 2>();
    if (T % 2) {
      _NOP();
  ba:	00 00       	nop
  bc:	00 00       	nop

public:
  SquareWaveGenerator(uint32_t frequency, int16_t amplitude) :
    ticksIncrement(FRAME_PERIOD_IN_CYCLES * frequency),
    elapsedTicks(0),
    amplitude(amplitude)
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	dc 01       	movw	r26, r24
int main() {
  using MyDriver = I2SDriver<5, 7>;

  MyDriver driver;
  SquareWaveGenerator<MyDriver::FRAME_PERIOD> generator(440, 16);
  int16_t sample = generator.getFirstSample();
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	20 e0       	ldi	r18, 0x00	; 0
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
  c8:	f3 e3       	ldi	r31, 0x33	; 51
  ca:	eb e2       	ldi	r30, 0x2B	; 43
   * routine which uses bst and bld. Since these two instructions use constants
   * for targeting a specific bit, there was no way of using the loop variable;
   * thus, the original loop was replaced by a recursive template function.
   */
  void sendSample(const int16_t sample) {
    UDR0 = int8_t(sample >> 8);
  cc:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  d0:	00 00       	nop
    delayInCyclesWithNOP<1>();
    UDR0 = uint8_t(sample & 0xff);
  d2:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  d6:	4f 2f       	mov	r20, r31
  d8:	4a 95       	dec	r20
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x58>
  dc:	00 00       	nop
  de:	00 00       	nop
   * routine which uses bst and bld. Since these two instructions use constants
   * for targeting a specific bit, there was no way of using the loop variable;
   * thus, the original loop was replaced by a recursive template function.
   */
  void sendSample(const int16_t sample) {
    UDR0 = int8_t(sample >> 8);
  e0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  e4:	00 00       	nop
    delayInCyclesWithNOP<1>();
    UDR0 = uint8_t(sample & 0xff);
  e6:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  ea:	2e 2f       	mov	r18, r30
  ec:	2a 95       	dec	r18
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x6c>
  f0:	00 00       	nop
   * branch and jump at the start of the loop, without the need for an
   * additional rjmp.
   */
  int16_t getNextSample() {
    elapsedTicks += ticksIncrement;
    int32_t tmp = elapsedTicks - PERIOD_IN_TICKS;
  f2:	ac 01       	movw	r20, r24
  f4:	bd 01       	movw	r22, r26
  f6:	5e 5f       	subi	r21, 0xFE	; 254
  f8:	61 4f       	sbci	r22, 0xF1	; 241
  fa:	71 09       	sbc	r23, r1
    if (tmp >= 0) {
  fc:	77 fd       	sbrc	r23, 7
  fe:	14 c0       	rjmp	.+40     	; 0x128 <main+0xa8>
 100:	00 00       	nop
 102:	00 00       	nop
 104:	00 00       	nop
 106:	00 00       	nop
 108:	db 01       	movw	r26, r22
 10a:	ca 01       	movw	r24, r20
      delayInCyclesWithNOP<4>();
      elapsedTicks = tmp;
    }
    // return compareAndReturnNextSampleInAssembly();
    if (elapsedTicks >= PERIOD_IN_TICKS / 2) {
 10c:	81 15       	cp	r24, r1
 10e:	22 e1       	ldi	r18, 0x12	; 18
 110:	92 07       	cpc	r25, r18
 112:	2a e7       	ldi	r18, 0x7A	; 122
 114:	a2 07       	cpc	r26, r18
 116:	b1 05       	cpc	r27, r1
 118:	20 f4       	brcc	.+8      	; 0x122 <main+0xa2>
 11a:	00 00       	nop
      return amplitude;
    } else {
      delayInCyclesWithNOP<1>();
      return -amplitude;
 11c:	30 ef       	ldi	r19, 0xF0	; 240
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	d5 cf       	rjmp	.-86     	; 0xcc <main+0x4c>
      delayInCyclesWithNOP<4>();
      elapsedTicks = tmp;
    }
    // return compareAndReturnNextSampleInAssembly();
    if (elapsedTicks >= PERIOD_IN_TICKS / 2) {
      return amplitude;
 122:	30 e1       	ldi	r19, 0x10	; 16
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	d2 cf       	rjmp	.-92     	; 0xcc <main+0x4c>
   * infinite loop, and uses the aforementioned jumps both to select the right
   * branch and jump at the start of the loop, without the need for an
   * additional rjmp.
   */
  int16_t getNextSample() {
    elapsedTicks += ticksIncrement;
 128:	9a 5d       	subi	r25, 0xDA	; 218
 12a:	ad 4f       	sbci	r26, 0xFD	; 253
 12c:	bf 4f       	sbci	r27, 0xFF	; 255
 12e:	ee cf       	rjmp	.-36     	; 0x10c <main+0x8c>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
